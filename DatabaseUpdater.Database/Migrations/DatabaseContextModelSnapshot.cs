// <auto-generated />
using System;
using DatabaseUpdater.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DatabaseUpdater.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<long?>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.GroupUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("GroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("GroupUsers");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Code")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Supply", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DispathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("DriverId")
                        .HasColumnType("bigint");

                    b.Property<long>("IncomingPlaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("OutgoingPlaceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PlanDispathDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PlanSupplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SupplyDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("IncomingPlaceId");

                    b.HasIndex("OutgoingPlaceId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.SupplyMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<long>("SupplyId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SupplyId");

                    b.ToTable("SupplyMaterials");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("character(11)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.ToTable("Users", t =>
                        {
                            t.HasCheckConstraint("Сheck_Users_PhoneNumber", "\"PhoneNumber\" ~ '^\\d*$'");
                        });
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Warehouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Group", b =>
                {
                    b.HasOne("DatabaseUpdater.Database.Entities.Role", "Role")
                        .WithMany("Groups")
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.GroupUser", b =>
                {
                    b.HasOne("DatabaseUpdater.Database.Entities.Group", "Group")
                        .WithMany("GroupUsers")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseUpdater.Database.Entities.User", "User")
                        .WithMany("GroupUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Location", b =>
                {
                    b.HasOne("DatabaseUpdater.Database.Entities.User", "User")
                        .WithMany("Locations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Supply", b =>
                {
                    b.HasOne("DatabaseUpdater.Database.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseUpdater.Database.Entities.Warehouse", "IncomingPlace")
                        .WithMany("IncomingSupplies")
                        .HasForeignKey("IncomingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseUpdater.Database.Entities.Warehouse", "OutgoingPlace")
                        .WithMany("OutgoingSupplies")
                        .HasForeignKey("OutgoingPlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseUpdater.Database.Entities.User", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("IncomingPlace");

                    b.Navigation("OutgoingPlace");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.SupplyMaterial", b =>
                {
                    b.HasOne("DatabaseUpdater.Database.Entities.Material", "Material")
                        .WithMany("SupplyMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseUpdater.Database.Entities.Supply", "Supply")
                        .WithMany("SupplyMaterials")
                        .HasForeignKey("SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Group", b =>
                {
                    b.Navigation("GroupUsers");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Material", b =>
                {
                    b.Navigation("SupplyMaterials");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Role", b =>
                {
                    b.Navigation("Groups");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Supply", b =>
                {
                    b.Navigation("SupplyMaterials");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.User", b =>
                {
                    b.Navigation("GroupUsers");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DatabaseUpdater.Database.Entities.Warehouse", b =>
                {
                    b.Navigation("IncomingSupplies");

                    b.Navigation("OutgoingSupplies");
                });
#pragma warning restore 612, 618
        }
    }
}
